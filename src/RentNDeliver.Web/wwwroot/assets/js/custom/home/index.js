/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../src/demo1/js/custom/home/index.js":
/*!********************************************!*\
  !*** ../src/demo1/js/custom/home/index.js ***!
  \********************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTCreateAccount = function () {\n    // Elements\n    var modal;\n    var modalEl;\n\n    var stepper;\n    var form;\n    var formSubmitButton;\n    var formContinueButton;\n\n    // Variables\n    var stepperObj;\n    var validations = [];\n\n    // Private Functions\n    var initStepper = function () {\n        // Initialize Stepper\n        stepperObj = new KTStepper(stepper);\n\n        // Stepper change event\n        stepperObj.on('kt.stepper.changed', function (stepper) {\n            if (stepperObj.getCurrentStepIndex() === 4) {\n                formSubmitButton.classList.remove('d-none');\n                formSubmitButton.classList.add('d-inline-block');\n                formContinueButton.classList.add('d-none');\n            } else if (stepperObj.getCurrentStepIndex() === 5) {\n                formSubmitButton.classList.add('d-none');\n                formContinueButton.classList.add('d-none');\n            } else {\n                formSubmitButton.classList.remove('d-inline-block');\n                formSubmitButton.classList.remove('d-none');\n                formContinueButton.classList.remove('d-none');\n            }\n        });\n\n        // Validation before going to next page\n        stepperObj.on('kt.stepper.next', function (stepper) {\n            console.log('stepper.next');\n\n            // Get the selected account type\n            var accountType = form.querySelector('input[name=\"account_type\"]:checked').value;\n\n            // Redirect based on the selected account type\n            if (accountType === 'corporate') {\n                window.location.pathname = '/Admin';\n            } else if (accountType === 'personal') {\n                window.location.pathname = '/Register';\n            }\n        });\n\n        // Prev event\n        stepperObj.on('kt.stepper.previous', function (stepper) {\n            console.log('stepper.previous');\n\n            stepper.goPrevious();\n            KTUtil.scrollTop();\n        });\n    }\n\n    var handleForm = function() {\n        formSubmitButton.addEventListener('click', function (e) {\n            // Validate form before change stepper step\n            var validator = validations[3]; // get validator for last form\n\n            validator.validate().then(function (status) {\n                console.log('validated!');\n\n                if (status == 'Valid') {\n                    // Prevent default button action\n                    e.preventDefault();\n\n                    // Disable button to avoid multiple click \n                    formSubmitButton.disabled = true;\n\n                    // Show loading indication\n                    formSubmitButton.setAttribute('data-kt-indicator', 'on');\n\n                    // Simulate form submission\n                    setTimeout(function() {\n                        // Hide loading indication\n                        formSubmitButton.removeAttribute('data-kt-indicator');\n\n                        // Enable button\n                        formSubmitButton.disabled = false;\n\n                        stepperObj.goNext();\n                    }, 2000);\n                } else {\n                    Swal.fire({\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-light\"\n                        }\n                    }).then(function () {\n                        KTUtil.scrollTop();\n                    });\n                }\n            });\n        });\n\n        // Expiry month. For more info, plase visit the official plugin site: https://select2.org/\n        $(form.querySelector('[name=\"card_expiry_month\"]')).on('change', function() {\n            // Revalidate the field when an option is chosen\n            validations[3].revalidateField('card_expiry_month');\n        });\n\n        // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\n        $(form.querySelector('[name=\"card_expiry_year\"]')).on('change', function() {\n            // Revalidate the field when an option is chosen\n            validations[3].revalidateField('card_expiry_year');\n        });\n\n        // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\n        $(form.querySelector('[name=\"business_type\"]')).on('change', function() {\n            // Revalidate the field when an option is chosen\n            validations[2].revalidateField('business_type');\n        });\n    }\n\n    var initValidation = function () {\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        // Step 1\n        validations.push(FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    account_type: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Account type is required'\n                            }\n                        }\n                    }\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        ));\n\n        // Step 2\n        validations.push(FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'account_team_size': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Time size is required'\n                            }\n                        }\n                    },\n                    'account_name': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Account name is required'\n                            }\n                        }\n                    },\n                    'account_plan': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Account plan is required'\n                            }\n                        }\n                    }\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    // Bootstrap Framework Integration\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        ));\n\n        // Step 3\n        validations.push(FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'business_name': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Busines name is required'\n                            }\n                        }\n                    },\n                    'business_descriptor': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Busines descriptor is required'\n                            }\n                        }\n                    },\n                    'business_type': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Busines type is required'\n                            }\n                        }\n                    },\n                    'business_email': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Busines email is required'\n                            },\n                            emailAddress: {\n                                message: 'The value is not a valid email address'\n                            }\n                        }\n                    }\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    // Bootstrap Framework Integration\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        ));\n\n        // Step 4\n        validations.push(FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'card_name': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Name on card is required'\n                            }\n                        }\n                    },\n                    'card_number': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Card member is required'\n                            },\n                            creditCard: {\n                                message: 'Card number is not valid'\n                            }\n                        }\n                    },\n                    'card_expiry_month': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Month is required'\n                            }\n                        }\n                    },\n                    'card_expiry_year': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Year is required'\n                            }\n                        }\n                    },\n                    'card_cvv': {\n                        validators: {\n                            notEmpty: {\n                                message: 'CVV is required'\n                            },\n                            digits: {\n                                message: 'CVV must contain only digits'\n                            },\n                            stringLength: {\n                                min: 3,\n                                max: 4,\n                                message: 'CVV must contain 3 to 4 digits only'\n                            }\n                        }\n                    }\n                },\n\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    // Bootstrap Framework Integration\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        ));\n    }\n    \n    return {\n        // Public Functions\n        init: function () {\n            // Elements\n            modalEl = document.querySelector('#kt_modal_create_account');\n\n            if ( modalEl ) {\n                modal = new bootstrap.Modal(modalEl);\n            }\n\n            stepper = document.querySelector('#kt_create_account_stepper');\n\n            if ( !stepper ) {\n                return;\n            }\n\n            form = stepper.querySelector('#kt_create_account_form');\n            formSubmitButton = stepper.querySelector('[data-kt-stepper-action=\"submit\"]');\n            formContinueButton = stepper.querySelector('[data-kt-stepper-action=\"next\"]');\n\n            initStepper();\n            initValidation();\n            handleForm();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function() {\n    KTCreateAccount.init();\n});\n\n//# sourceURL=webpack://keenthemes/../src/demo1/js/custom/home/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../src/demo1/js/custom/home/index.js"]();
/******/ 	
/******/ })()
;