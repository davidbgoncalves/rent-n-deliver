# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  web-application:
    build:
      context: .
      target: final
    ports:
      - 8080:8080
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_started
      mongodb:
        condition: service_started
        
  postgres:
    image: postgres
    container_name: rent-n-deliver-postgres-server
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "#123Mudar"
      POSTGRES_DB: RentNDeliverDb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
        
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rent-n-deliver-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "#123Mudar"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
  
  mongodb:
    image: mongo:latest
    container_name: ren-n-deliver-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      
volumes:
  postgres_data:
  rabbitmq_data:
  mongodb_data:
  mongodb_config:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

